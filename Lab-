R.V.RaghuNandan
BL.EN.U4AIE23147


import numpy as np
import pandas as pd
import statistics
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, MinMaxScaler, StandardScaler

data_file = "Lab Session Data.xlsx"

Question A1:
df_purchase = pd.read_excel(data_file, sheet_name="Purchase Data")
A = df_purchase.iloc[:, :-1].values  
C = df_purchase.iloc[:, -1].values   

vector_space_dim = A.shape[1]
num_vectors = A.shape[0]
rank_A = np.linalg.matrix_rank(A)
pseudo_inv_A = np.linalg.pinv(A)
cost_vector = np.dot(pseudo_inv_A, C)

Question A2:
X = np.dot(pseudo_inv_A, C)

Question A3: 
df_purchase["Customer_Type"] = ["RICH" if x > 200 else "POOR" for x in C]

Question A4:
df_stock = pd.read_excel(data_file, sheet_name="IRCTC Stock Price")
price_data = df_stock["Price Column D"]  
mean_price = statistics.mean(price_data)
variance_price = statistics.variance(price_data)

wednesday_data = df_stock[df_stock["Day"] == "Wednesday"]["Price Column D"]
sample_mean_wednesday = statistics.mean(wednesday_data)

df_stock["Loss_Prob"] = df_stock["Chg% Column I"].apply(lambda x: x < 0)
prob_loss = df_stock["Loss_Prob"].mean()

plt.figure(figsize=(8, 6))
sns.scatterplot(x=df_stock["Day"], y=df_stock["Chg% Column I"])
plt.xlabel("Day of the Week")
plt.ylabel("Chg%")
plt.title("Stock Change Percentage vs Day of the Week")
plt.show()


Question A5: 
df_thyroid = pd.read_excel(data_file, sheet_name="thyroid0387_UCI")
attribute_types = df_thyroid.dtypes
missing_values = df_thyroid.isnull().sum()
outlier_detection = df_thyroid.describe()

label_enc = LabelEncoder()
one_hot_enc = OneHotEncoder()
for col in df_thyroid.select_dtypes(include=["object"]).columns:
    df_thyroid[col] = label_enc.fit_transform(df_thyroid[col])

Question A6:
df_thyroid.fillna(df_thyroid.mean(), inplace=True)  

Question A7: 
scaler = MinMaxScaler()
df_thyroid_normalized = scaler.fit_transform(df_thyroid)

Question A8: 
vec1, vec2 = df_thyroid.iloc[0, :], df_thyroid.iloc[1, :]
f11 = np.sum((vec1 == 1) & (vec2 == 1))
f00 = np.sum((vec1 == 0) & (vec2 == 0))
f01 = np.sum((vec1 == 0) & (vec2 == 1))
f10 = np.sum((vec1 == 1) & (vec2 == 0))
JC = f11 / (f01 + f10 + f11)
SMC = (f11 + f00) / (f00 + f01 + f10 + f11)

Question A9:
cos_sim = np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))

Question A10:
similarity_matrix = np.zeros((20, 20))
for i in range(20):
    for j in range(20):
        vec1, vec2 = df_thyroid.iloc[i, :], df_thyroid.iloc[j, :]
        similarity_matrix[i, j] = np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))

plt.figure(figsize=(10, 8))
sns.heatmap(similarity_matrix, annot=True, cmap="coolwarm")
plt.title("Heatmap of Similarity Measures")
plt.show()
